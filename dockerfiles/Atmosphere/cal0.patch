diff --git a/stratosphere/ams_mitm/source/fs_mitm/fsmitm_service.cpp b/stratosphere/ams_mitm/source/fs_mitm/fsmitm_service.cpp
index bd989810..b2824600 100644
--- a/stratosphere/ams_mitm/source/fs_mitm/fsmitm_service.cpp
+++ b/stratosphere/ams_mitm/source/fs_mitm/fsmitm_service.cpp
@@ -237,13 +237,15 @@ Result FsMitmService::OpenBisStorage(Out<std::shared_ptr<IStorageInterface>> out
     const bool is_sysmodule = sts::ncm::IsSystemTitleId(this->title_id);
     const bool has_bis_write_flag = Utils::HasFlag(static_cast<u64>(this->title_id), "bis_write");
     const bool has_cal0_read_flag = Utils::HasFlag(static_cast<u64>(this->title_id), "cal_read");
+    const bool has_cal0_write_flag = Utils::HasFlag(static_cast<u64>(this->title_id), "cal_write");
 
     /* Set output storage. */
     if (bis_partition_id == FsBisStorageId_Boot0) {
         out_storage.SetValue(std::make_shared<IStorageInterface>(new Boot0Storage(bis_storage, this->title_id)));
     } else if (bis_partition_id == FsBisStorageId_CalibrationBinary) {
-        /* PRODINFO should *never* be writable. */
-        if (is_sysmodule || has_cal0_read_flag) {
+        if (has_cal0_read_flag && has_cal0_write_flag) {
+            out_storage.SetValue(std::make_shared<IStorageInterface>(new ProxyStorage(bis_storage)));
+        } else if (is_sysmodule || has_cal0_read_flag) {
             out_storage.SetValue(std::make_shared<IStorageInterface>(new ReadOnlyStorageAdapter(new ProxyStorage(bis_storage))));
         } else {
             /* Do not allow non-sysmodules to read *or* write CAL0. */
